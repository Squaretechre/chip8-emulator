using Xunit;
using Xunit.Abstractions;

namespace Chip8Emulator.Tests;

public class DisplayShould
{
    private readonly ITestOutputHelper _testOutputHelper;

    public DisplayShould(ITestOutputHelper testOutputHelper)
    {
        _testOutputHelper = testOutputHelper;
    }
    
    private const string ExpectedEmptyDisplay = @"0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
";
    
        private const string ExpectedWrappedDisplay = 
            @"1111000000000000000000000000000000000000000000000000000000001111
1111000000000000000000000000000000000000000000000000000000001111
1111000000000000000000000000000000000000000000000000000000001111
1111000000000000000000000000000000000000000000000000000000001111
1111000000000000000000000000000000000000000000000000000000001111
1111000000000000000000000000000000000000000000000000000000001111
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
";

    private const string ExpectedAlienOutput = @"0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000101110100000000000000000000000000000000000000000000000
0000000000011111000000000000000000000000000000000000000000000000
0000000000110101100000000000000000000000000000000000000000000000
0000000000111111100000000000000000000000000000000000000000000000
0000000000010101000000000000000000000000000000000000000000000000
0000000000101010100000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
";

    [Fact]
    public void be_an_empty_64x32_pixel_grid_when_instantiated()
    {
        var sut = new Display();
        
        Assert.Equal(ExpectedEmptyDisplay, sut.ToString());
    } 
    
    [Fact]
    public void draw_a_sprite_at_given_coordinates()
    {
        var alien = new byte[] { 0xBA, 0x7C, 0xD6, 0xFE, 0x54, 0xAA };

        var sut = new Display();

        sut.DrawSpriteAt(10, 2, alien);

        _testOutputHelper.WriteLine(sut.ToString());
        
        Assert.Equal(ExpectedAlienOutput, sut.ToString());
    }
    
    [Fact]
    public void wrap_sprites_that_go_out_of_the_bounds_of_the_display_to_the_other_side()
    {
        var blockOf1s = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

        var sut = new Display();

        sut.DrawSpriteAt(60, 0, blockOf1s);

        var display = sut.ToString();
        
        _testOutputHelper.WriteLine(display);
        
        Assert.Equal(ExpectedWrappedDisplay, display);
    }
    
    [Fact]
    public void clear_the_display()
    {
        var alien = new byte[] { 0xBA, 0x7C, 0xD6, 0xFE, 0x54, 0xAA };

        var sut = new Display();

        sut.DrawSpriteAt(10, 2, alien);
        
        Assert.Equal(ExpectedAlienOutput, sut.ToString());

        sut.Clear();
        
        Assert.Equal(ExpectedEmptyDisplay, sut.ToString());
    }
    
    [Fact]
    public void report_false_when_no_pixels_were_erased_due_to_xor_on_the_last_draw()
    {
        var blockOf1s = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
        var blockOf0s = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        var sut = new Display();

        sut.DrawSpriteAt(10, 2, blockOf1s);
        sut.DrawSpriteAt(10, 2, blockOf0s);

        _testOutputHelper.WriteLine(sut.ToString());
        
        Assert.False(sut.PixelsErasedDuringLastDraw());
    }
    
    [Fact]
    public void report_true_when_pixels_were_erased_due_to_xor_on_the_last_draw()
    {
        var blockOf1s = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
        var spriteThatFlips1bit = new byte[] { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 };

        var sut = new Display();

        sut.DrawSpriteAt(10, 2, blockOf1s);
        sut.DrawSpriteAt(10, 2, spriteThatFlips1bit);

        _testOutputHelper.WriteLine(sut.ToString());
        
        Assert.True(sut.PixelsErasedDuringLastDraw());
    }
}